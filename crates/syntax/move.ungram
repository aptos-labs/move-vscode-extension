// Aptos Move Un-Grammar.
//
// This grammar specifies the structure of Rust's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node

SourceFile = AddressDef* | Module* | ModuleSpec* | Script*

AddressDef =
    'address' AddressRef
    '{' Module* '}'

Module =
    Attr*
    'module' (AddressRef '::')? Name
    '{' UseStmt* Item* '}'

Script =
    Attr* 'script' '{' UseStmt* Item* '}'

Item =
    Friend
    | Fun
    | Const
    | Struct
    | Enum
    | SpecFun
    | Schema
    | ItemSpec

InferenceCtxOwner =
    Fun | SpecFun

IdentPatKind =
    LetStmt | Param | SchemaField

UseStmt =
    Attr* 'use' UseSpeck ';'

UseSpeck =
    Path (UseAlias | ('::' UseGroup) )?

UseAlias =
    'as' Name

UseGroup =
    '{' UseSpeck* '}'

Friend =
    'friend' Path ';'

StructOrEnum =
    Struct | Enum

Struct =
    Attr*
    'struct' Name TypeParamList?
    AbilityList?
    (NamedFieldList | TupleFieldList)

Enum =
    Attr*
    'enum' Name TypeParamList?
    AbilityList?
    VariantList

VariantList =
    '{' (Variant (',' Variant)* ','?)? '}'

Variant =
    Attr* Name (NamedFieldList | TupleFieldList)?

AbilityList =
    'has' (Ability (',' Ability)* ','?)?

Ability = 'ident'

FieldList =
    NamedFieldList | TupleFieldList

NamedFieldList =
    '{' fields:(NamedField (',' NamedField)* ','?)? '}'

AnyField =
    NamedField | TupleField

NamedField =
    Attr* Name ':' Type

TupleFieldList =
  '(' fields:(TupleField (',' TupleField)* ','?)? ')'

TupleField =
    Attr* Type

Const =
    Attr* 'const' Name ':' Type '=' body:Expr ';'

Fun =
    Attr* VisibilityModifier?
    'native'? 'entry'? 'inline'?
    'fun' Name TypeParamList? ParamList RetType?
    (body:BlockExpr | ';')

VisibilityModifier =
    ('public' ('(' ('script' | 'package' | 'friend') ')')?)
        | 'package'
        | 'friend'

ParamList =
    '('
        (Param (',' Param)* ','?)?
    ')'

Param = IdentPat (':' Type)?

RetType =
  ':' Type

Pat =
    IdentPat
    | TuplePat
    | StructPat
    | TupleStructPat
    | RestPat
    | WildcardPat
    | PathPat

TuplePat =
    '(' pats:(Pat (',' Pat)* ','?)? ')'

TupleStructPat =
    Path '(' fields:(Pat (',' Pat)* ','?)? ')'

StructPat =
    Path StructPatFieldList

StructPatFieldList =
    '{' fields:(StructPatField (',' StructPatField)* ','?)? '}'

StructPatField =
    (NameRef ':' Pat) | IdentPat | RestPat | WildcardPat

WildcardPat = '_'
RestPat = '..'
IdentPat = Name
PathPat = Path

Type =
    PathType
    | RefType
    | TupleType
    | UnitType
    | ParenType
    | LambdaType

RefType =
    '&' 'mut'? Type

TupleType =
    '(' types:(Type (',' Type)* ','?)? ')'
UnitType = '(' ')'
ParenType = '(' Type ')'

PathType =
    Path

LambdaType =
    '|' lambda_type_params:(LambdaTypeParam (',' LambdaTypeParam)* ','?)? '|' (return_type:Type)?

LambdaTypeParam =
    Type

BlockExpr =
    '{'
        UseStmt*
        stmts:Stmt*
        tail_expr:Expr?
    '}'

InlineExpr = Expr

BlockOrInlineExpr = BlockExpr | InlineExpr

Stmt =
    ';'
    | ExprStmt
    | LetStmt
    | SchemaField
    | SpecInlineFun

LetStmt =
    'let' Pat (':' Type) '=' initializer:Expr ';'

ExprStmt =
    Expr ';'?

Expr =
    BinExpr
    | IsExpr
    | Literal
    | ParenExpr
    | PathExpr
    | BorrowExpr | DerefExpr | BangExpr
    | ResourceExpr
    | CallExpr | MethodCallExpr | AssertMacroExpr
    | LambdaExpr
    | RangeExpr | VectorLitExpr | StructLit | TupleExpr
    | IndexExpr
    | DotExpr
    | AbortExpr
    | BlockExpr
    | IfExpr | WhileExpr | ForExpr | LoopExpr
    | BreakExpr | ContinueExpr | ReturnExpr
    | CastExpr
    | MatchExpr

ForExpr =
    'for' ForCondition loop_body_expr:(BlockExpr | InlineExpr)

ForCondition =
    '(' IdentPat 'in' Expr ')'

BorrowExpr =
    '&' 'mut'? Expr

DerefExpr =
    '*' Expr

BangExpr =
    '!' Expr

ResourceExpr =
    ('move' | 'copy') Expr

BinExpr =
    lhs:Expr
    op:(
    '||' | '&&'
    | '==' | '!=' | '<=' | '>=' | '<' | '>'
    | '+' | '*' | '-' | '/' | '%' | '<<' | '>>' | '^' | '|' | '&'
    | '=' | '+=' | '/=' | '*=' | '%=' | '>>=' | '<<=' | '-=' | '|=' | '&=' | '^='
    )
    rhs:Expr

DotExpr =
    receiver_expr:Expr '.' FieldRef

FieldRef =
    NameRef | IndexRef

IndexExpr =
    base_expr:Expr '[' arg_expr:Expr ']'

AbortExpr =
    'abort' Expr?

StructLit =
    Path StructLitFieldList

StructLitFieldList =
    '{' fields:(StructLitField (',' StructLitField)* ','?)? '}'

StructLitField =
    (NameRef ':')? Expr

ParenExpr =
    '(' Expr ')'

IfExpr =
    'if' Condition then_branch:(BlockExpr | InlineExpr)
    ('else' else_branch:(BlockExpr | InlineExpr))?

WhileExpr =
    'while' Condition loop_body_expr:(BlockExpr | InlineExpr)

Condition =
    '(' Expr ')'

LoopExpr =
    'loop' loop_body_expr:(BlockExpr | InlineExpr)

BreakExpr =
    'break' Label?

ContinueExpr =
    'continue' Label?

ReturnExpr =
    'return' Expr?

CastExpr =
    Expr 'as' Type

Label =
    'quote_ident'

LambdaExpr =
    LambdaParamList (body_expr:Expr)?

LambdaParamList =
    '|' lambda_params:(LambdaParam (',' LambdaParam)* ','?)? '|'

LambdaParam =
    (IdentPat | WildcardPat) (':' Type)?

IsExpr =
    Expr 'is' types:(Type ('|' Type)*)

MatchExpr =
    'match' '(' Expr ')' MatchArmList

MatchArmList =
    '{' MatchArm* '}'

MatchArm =
    Pat MatchGuard? '=>' Expr ','?

MatchGuard =
    'if' Expr

CallExpr =
    Path ArgList

MethodCallExpr =
    receiver_expr:Expr '.' NameRef ('::' TypeArgList)? ArgList

AssertMacroExpr =
    'ident' '!' ArgList

RangeExpr =
    start_expr:Expr '..' end_expr:Expr

VectorLitExpr =
    'ident' TypeArgList? '[' arg_exprs:(Expr (',' Expr)* ','?)? ']'

TupleExpr =
    '(' exprs:(Expr*) ')'

MethodOrPath =
    MethodCallExpr | Path

ArgList =
    '(' arg_exprs:(Expr (',' Expr)* ','?)? ')'

PathExpr =
    Path

Path =
    (qualifier:Path '::')? segment:PathSegment

PathSegment =
    PathAddress | (NameRef TypeArgList? )

PathAddress =
    ValueAddress

TypeParamList =
    '<' type_parameters:(TypeParam (',' TypeParam)* ','?)? '>'

TypeParam =
    'phantom'? Name

TypeArgList =
    '<' type_arguments:(TypeArg (',' TypeArg)* ','?)? '>'

TypeArg =
    Type

Attr =
  '#' '!'? '[' AttrItem ']'

AttrItem =
    Path '=' Expr

NameLike =
    Name | NameRef

Name =
    'ident'

// not present in syntax tree
AddressRef =
    NamedAddress | ValueAddress

NamedAddress =
    'ident'

ValueAddress =
    'int_number'

NameRef =
    'ident'

IndexRef =
    'int_number'

Literal =
    'int_number' | 'byte_string' | 'hex_string' | 'true' | 'false' | AddressLit

AddressLit = '@' (NamedAddress | ValueAddress)

// -------------------------- Specifications

ModuleSpec =
    Attr* 'spec' Path '{' UseStmt* Item* '}'

ItemSpec =
    Attr* 'spec' ('module' | NameRef) spec_block:BlockExpr

SpecFun =
    Attr*
    'spec' 'native'? 'fun' Name TypeParamList? ParamList RetType?
    (spec_block:BlockExpr | ';')

SpecInlineFun =
    'native'? 'fun' Name TypeParamList? ParamList RetType?
    (spec_block:BlockExpr | ';')

Schema =
    Attr*
    'spec' 'schema' Name TypeParamList?
    spec_block:BlockExpr

SchemaField =
    'local'? IdentPat ':' Type ';'

SpecPredicateStmt =
    ('assert' | 'assume' | 'requires' | 'ensures' | 'decreases' | 'modifies')
    SpecPredicatePropertyList?
    Expr ';'

SpecPredicatePropertyList =
    '[' properties:(SpecPredicateProperty (',' SpecPredicateProperty)* ','?)? ']'

SpecPredicateProperty =
    'ident' '=' Literal
